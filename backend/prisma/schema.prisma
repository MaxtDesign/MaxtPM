// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  role      UserRole @default(PROPERTY_MANAGER)
  isActive  Boolean  @default(true)
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  properties Property[]
  tenants    Tenant[]
  payments   Payment[]

  @@map("users")
}

model Company {
  id        String   @id @default(cuid())
  name      String
  address   Json     // Address object
  phone     String
  email     String
  website   String?
  logo      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users      User[]
  properties Property[]

  @@map("companies")
}

model Property {
  id             String         @id @default(cuid())
  name           String
  address        Json           // Address object
  propertyType   PropertyType
  bedrooms       Int
  bathrooms      Int
  squareFootage  Int
  rentAmount     Float
  depositAmount  Float
  status         PropertyStatus @default(AVAILABLE)
  description    String?
  photos         String[]       // Array of photo URLs
  amenities      String[]       // Array of amenities
  companyId      String
  company        Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relations
  tenants  Tenant[]
  payments Payment[]

  @@map("properties")
}

model Tenant {
  id              String       @id @default(cuid())
  firstName       String
  lastName        String
  email           String
  phone           String
  dateOfBirth     DateTime
  emergencyContact Json        // EmergencyContact object
  propertyId      String
  property        Property     @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  leaseStartDate  DateTime
  leaseEndDate    DateTime
  rentAmount      Float
  depositAmount   Float
  status          TenantStatus @default(PENDING)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  payments Payment[]

  @@map("tenants")
}

model Payment {
  id          String        @id @default(cuid())
  tenantId    String
  tenant      Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  propertyId  String
  property    Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  amount      Float
  type        PaymentType
  status      PaymentStatus @default(PENDING)
  dueDate     DateTime
  paidDate    DateTime?
  description String?
  stripePaymentId String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("payments")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

// Enums
enum UserRole {
  PROPERTY_MANAGER
  ADMIN
  TENANT
}

enum PropertyType {
  APARTMENT
  HOUSE
  CONDO
  TOWNHOUSE
  COMMERCIAL
}

enum PropertyStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  UNAVAILABLE
}

enum TenantStatus {
  ACTIVE
  INACTIVE
  PENDING
  EVICTED
}

enum PaymentType {
  RENT
  DEPOSIT
  LATE_FEE
  MAINTENANCE
  OTHER
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}
